-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- Settings
local ESP_Settings = {
    OutlineColor = Color3.fromRGB(255, 255, 255),
    FillColor = Color3.fromRGB(255, 255, 255),
    OutlineTransparency = 0,
    FillTransparency = 0.8,
    UsernameColor = Color3.fromRGB(255, 255, 255),
    UsernameStrokeColor = Color3.fromRGB(0, 0, 0),
    UsernameOffset = Vector3.new(0, 3, 0),
    UsernameSize = 14,
    ItemColor = Color3.fromRGB(255, 255, 0),
    ItemSize = 12,
    UpdateInterval = 0.2
}

local playerESPMap = {}
local cleanupConnections = {}

local function getDistance(fromPos, toPos)
    return (fromPos - toPos).Magnitude
end

local function isVisible(targetPos)
    local rayParams = RaycastParams.new()
    rayParams.FilterDescendantsInstances = {LocalPlayer.Character}
    rayParams.FilterType = Enum.RaycastFilterType.Blacklist
    local ray = workspace:Raycast(Camera.CFrame.Position, (targetPos - Camera.CFrame.Position).Unit * 1000, rayParams)
    return ray == nil
end

local function setupESP(player, character)
    if player == LocalPlayer or playerESPMap[player] then return end

    local rootPart = character:WaitForChild("HumanoidRootPart", 5)
    local humanoid = character:WaitForChild("Humanoid", 5)
    if not rootPart or not humanoid then return end

    local highlight = Instance.new("Highlight")
    highlight.Adornee = character
    highlight.OutlineColor = ESP_Settings.OutlineColor
    highlight.FillColor = ESP_Settings.FillColor
    highlight.OutlineTransparency = ESP_Settings.OutlineTransparency
    highlight.FillTransparency = ESP_Settings.FillTransparency
    highlight.Parent = character

    local billboard = Instance.new("BillboardGui")
    billboard.Adornee = rootPart
    billboard.Size = UDim2.new(0, 150, 0, 60)
    billboard.StudsOffset = ESP_Settings.UsernameOffset
    billboard.AlwaysOnTop = true
    billboard.Parent = character

    local usernameLabel = Instance.new("TextLabel")
    usernameLabel.Text = player.Name
    usernameLabel.Size = UDim2.new(1, 0, 0.33, 0)
    usernameLabel.BackgroundTransparency = 1
    usernameLabel.TextColor3 = ESP_Settings.UsernameColor
    usernameLabel.TextStrokeColor3 = ESP_Settings.UsernameStrokeColor
    usernameLabel.TextStrokeTransparency = 0
    usernameLabel.Font = Enum.Font.SourceSansBold
    usernameLabel.TextSize = ESP_Settings.UsernameSize
    usernameLabel.Parent = billboard

    local infoLabel = Instance.new("TextLabel")
    infoLabel.Text = "Loading..."
    infoLabel.Size = UDim2.new(1, 0, 0.33, 0)
    infoLabel.Position = UDim2.new(0, 0, 0.33, 0)
    infoLabel.BackgroundTransparency = 1
    infoLabel.TextColor3 = ESP_Settings.ItemColor
    infoLabel.TextStrokeColor3 = ESP_Settings.UsernameStrokeColor
    infoLabel.TextStrokeTransparency = 0
    infoLabel.Font = Enum.Font.SourceSansBold
    infoLabel.TextSize = ESP_Settings.ItemSize
    infoLabel.Parent = billboard

    local toolLabel = Instance.new("TextLabel")
    toolLabel.Text = "Holding: None"
    toolLabel.Size = UDim2.new(1, 0, 0.33, 0)
    toolLabel.Position = UDim2.new(0, 0, 0.66, 0)
    toolLabel.BackgroundTransparency = 1
    toolLabel.TextColor3 = ESP_Settings.ItemColor
    toolLabel.TextStrokeColor3 = ESP_Settings.UsernameStrokeColor
    toolLabel.TextStrokeTransparency = 0
    toolLabel.Font = Enum.Font.SourceSansBold
    toolLabel.TextSize = ESP_Settings.ItemSize
    toolLabel.Parent = billboard

    local lastUpdate = 0
    local connection

    connection = RunService.Heartbeat:Connect(function(dt)
        lastUpdate += dt
        if lastUpdate >= ESP_Settings.UpdateInterval then
            lastUpdate = 0

            if not character:IsDescendantOf(workspace) or not player:IsDescendantOf(Players) then
                highlight:Destroy()
                billboard:Destroy()
                if connection then connection:Disconnect() end
                playerESPMap[player] = nil
                return
            end

            -- Health
            local health = math.max(0, math.floor(humanoid.Health))
            local maxHealth = math.max(1, math.floor(humanoid.MaxHealth))
            local healthPercent = health / maxHealth
            local healthColor = Color3.fromRGB(255 * (1 - healthPercent), 255 * healthPercent, 0)

            -- Distance
            local distance = math.floor(getDistance(Camera.CFrame.Position, rootPart.Position))

            -- Visibility
            local visible = isVisible(rootPart.Position)
            highlight.FillTransparency = visible and ESP_Settings.FillTransparency or 0.95

            -- Update info label
            infoLabel.Text = "‚ù§Ô∏è " .. health .. "/" .. maxHealth .. " | üìè " .. distance .. " studs"
            infoLabel.TextColor3 = healthColor

            -- Tool tracking
            local toolName = "None"
            for _, item in ipairs(character:GetChildren()) do
                if item:IsA("Tool") then
                    toolName = item.Name
                    break
                end
            end
            toolLabel.Text = "Holding: " .. toolName
        end
    end)

    playerESPMap[player] = {
        highlight = highlight,
        billboard = billboard,
        updater = connection
    }
end

local function createESPForPlayer(player)
    local charAddedConn
    charAddedConn = player.CharacterAdded:Connect(function(character)
        character:WaitForChild("HumanoidRootPart", 5)
        task.wait(0.05)
        setupESP(player, character)
    end)

    if player.Character then
        setupESP(player, player.Character)
    end

    cleanupConnections[player] = charAddedConn
end

local function refreshESP()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            createESPForPlayer(player)
        end
    end
end

refreshESP()

Players.PlayerAdded:Connect(function(player)
    if player ~= LocalPlayer then
        createESPForPlayer(player)
    end
end)

Players.PlayerRemoving:Connect(function(player)
    if playerESPMap[player] then
        local espData = playerESPMap[player]
        if espData.updater then espData.updater:Disconnect() end
        if espData.highlight then espData.highlight:Destroy() end
        if espData.billboard then espData.billboard:Destroy() end
        playerESPMap[player] = nil
    end

    if cleanupConnections[player] then
        cleanupConnections[player]:Disconnect()
        cleanupConnections[player] = nil
    end
end)
